#version 330 core

// Interpolated values from the vertex shaders
in vec4 vs_vertexColor;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 LightDirection_cameraspace2;
in vec3 LightDirection_cameraspace3;
// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightPosition_worldspace2;
uniform vec3 LightPosition_worldspace3;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 50.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor = vs_vertexColor.rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	

	//My Light 1
	float distance2 = length( LightPosition_worldspace2 - Position_worldspace );
	vec3 l2 = normalize( LightDirection_cameraspace2 );
	float cosTheta2 = clamp( dot( n,l2 ), 0,1 );
	vec3 R2 = reflect(-l2,n);
	float cosAlpha2 = clamp( dot( E,R2 ), 0,1 );
	
	//My Light 2
	float distance3 = length( LightPosition_worldspace3 - Position_worldspace );
	vec3 l3 = normalize( LightDirection_cameraspace3);
	float cosTheta3 = clamp( dot( n,l3), 0,1 );
	vec3 R3 = reflect(-l3,n);
	float cosAlpha3 = clamp( dot( E,R3 ), 0,1 );
	
	color = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance)+
		//My Light 1
		MaterialAmbientColor +
		MaterialDiffuseColor * LightColor * LightPower * cosTheta2 / (distance2*distance2) +
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha2,5) / (distance2*distance2);/*
		//My light 2
		MaterialAmbientColor +
		MaterialDiffuseColor * LightColor * LightPower * cosTheta3 / (distance3*distance3) +
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha3,5) / (distance3*distance3);
		*/
}